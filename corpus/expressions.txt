===
addition is left associative
===

def a = x - y - z

---

(source_file
  (val_bind
    bindto: (name)
    val: (binary
           (binary
             (name)
             (qualsymbol)
             (name))
           (qualsymbol)
           (name))))

===
multiplication is left associative
===

def a = x * y * z

---

(source_file
  (val_bind
    bindto: (name)
    val: (binary
           (binary
             (name)
             (qualsymbol)
             (name))
           (qualsymbol)
           (name))))

===
multiplication has higher precedence that addition
===

def a = x + y * z

---

(source_file
  (val_bind
    bindto: (name)
    val: (binary
           (name)
           (qualsymbol)
           (binary
             (name)
             (qualsymbol)
             (name)))))


===
parens work
===

def a = (x + y) * z

---

(source_file
  (val_bind
    bindto: (name)
    val: (binary
           (binary
             (name)
             (qualsymbol)
             (name))
           (qualsymbol)
           (name))))

===
function applys work as expected
===

def a = x y z

---

(source_file
  (val_bind
    bindto: (name)
    val: (apply
           (apply
             (name)
             (name))
           (name))))

===
function applications have higher precedence than multiplication
===

def a = x y * z w

---

(source_file
  (val_bind
    bindto: (name)
    val: (binary
           (apply
             (name)
             (name))
           (qualsymbol)
           (apply
             (name)
             (name)))))

===
apply and neg don't break subtraction
===

def a = x -y

---

(source_file
  (val_bind
    bindto: (name)
    val: (binary
           (name)
           (qualsymbol)
           (name))))

===
neg binds after apply
===

def a = - x y

---

(source_file
  (val_bind
    bindto: (name)
    val: (neg
           (apply
             (name)
             (name)))))

===
neg binds before mul
===

def a = -x * y

---

(source_file
  (val_bind
    bindto: (name)
    val: (binary
           (neg
             (name))
           (qualsymbol)
           (name))))

===
if works
===

def x = if a then b else c + d

---

(source_file
  (val_bind
    bindto: (name)
    val: (if
           (name)
           (name)
           (binary
             (name)
             (qualsymbol)
             (name)))))

===
qualified symbols parse correctly
===

def x = x a.b.c.+ y

---

(source_file
  (val_bind
    bindto: (name)
    val: (binary
           (name)
           (qualsymbol)
           (name))))
